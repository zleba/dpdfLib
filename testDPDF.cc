#include <iostream>
#include "DPDFset.h"

using namespace std;

extern "C" void h12006pdf_(double *z, double *q2, int *ifit, int *ipdf, double *xpq, double *f2, double *fl, double *c2, double *cl);
extern "C" void qcd_2006_(double *z, double *q2, int *ifit, double *XPQ, double *F2, double *FL, double *C2, double *CL);

extern "C" void  h12006fluxerr_(double *xpom, double *t, int *Int, int *ifit, int *ipdf, int *ipom, double *flux);

extern "C" void  strpriv_(double *X, double *MUF, double *xpom, double *tcut, double *XPQ); //scale muf in GeV

#include "gZDPDF.h" //for SJ

void check2006()
{
    //DPDFset dpdf("GKG18_DPDF_FitA_NLO_pom");
    DPDFset dpdf("H1_DPDF_2006B_NLO_pom", "H1_DPDF_2006B_NLO_reg");

    int id = 1;
    double z = 1.072267e-01, q2 = pow(2.236068e+01,2), xp = 0.001, tAbs = 0.04;
    //double z = 9.999953e-04, q2 = pow(1.322876e+00,2), xp = 0.01, tAbs = 0.04;
    //cout << dpdf.zfzQ2xpt(0, id, z, q2, xp, tAbs) << endl;



    for(int imem =0; imem < dpdf.size(); ++imem) {
        //double newVal = dpdf.getPDF(0,imem)->xfxQ2(id, z, q2);
        double newVal = dpdf.zfzQ2xpt(imem, id, z, q2, xp, 0.3);
        //H1 standAlone
        int ifit = 2, ipdf =imem;
        double xpq[13], f2[2], fl[2], c2[2], cl[2];
        h12006pdf_(&z, &q2, &ifit, &ipdf, xpq, f2, fl, c2, cl);
        //qcd_2006_(&z, &q2, &ifit, xpq, f2, fl, c2, cl);

        int Int = 0, ipom = 1;
        double t = -0.3;
        double flux;
        h12006fluxerr_(&xp, &t, &Int, &ifit, &ipdf, &ipom, &flux);
        xpq[5] *= flux;

        cout << imem<<" "<<newVal<< " "<< xpq[5] << " | " << xpq[5]/newVal << endl;
        //cout << imem<<" "<< flux / dpdf.getDPDF(0,imem)->fluxInt(xp, 0, 0.3) << endl;
    }
}


void check2007()
{
    DPDFset dpdf("H1_DPDF_2007Jets_NLO_pom");

    for(int id = -4; id <= 4; ++id) {
        double z = 4.037018e-02, q2 = pow(5.656854e+00,2), xp = 0.01, tAbs = 0.3;
        //double z = 9.999953e-04, q2 = pow(1.322876e+00,2), xp = 0.01, tAbs = 0.04;
        //cout << dpdf.zfzQ2xpt(0, id, z, q2, xp, tAbs) << endl;

        int imem = 0;
        //double newVal = dpdf.getPDF(0,imem)->xfxQ2(id, z, q2);
        double newVal = dpdf.zfzQ2xp(imem, id, z, q2, xp, 0, tAbs);

        //H1 standAlone
        double xpq[13];
        double q = sqrt(q2);
        double tcut = -tAbs;
        strpriv_(&z, &q, &xp, &tcut, xpq); //scale muf in GeV

        //qcd_2006_(&z, &q2, &ifit, xpq, f2, fl, c2, cl);

        cout << imem<<" "<<newVal<< " "<< xpq[6+id] << " | " << xpq[6+id]/newVal << endl;
    }
    //cout << imem<<" "<< flux / dpdf.getDPDF(0,imem)->fluxInt(xp, 0, 0.3) << endl;
}



void getZEUSgrids(vector<double> &zVec, vector<double> &qVec);
void checkZEUS()
{
    /*
    PDF* pdf = mkPDF("ZEUS_DPDF_2009SJ_NLO_pom", 0);
    //PDF* pdf = mkPDF("NNPDF31_lo_as_0130", 0);
    //cout << pdf->xfxQ(0, 1.0000000e-09, 1.6500000e+00) << endl;
    //cout << pdf->xfxQ(0, 1.2805087e-09, 1.6500000e+00) << endl;
    //cout << pdf->xfxQ(0, 1.6397027e-09, 1.6500000e+00) << endl;
    //return;

    cout << pdf->xfxQ(0, 1.000000e-05, 1.341641e+00) << endl;
    cout << pdf->xfxQ(0, 1.000000e-05, 1.350000e+00) << endl;
    //cout << pdf->xfxQ2(0, 1.068506e-05, 1.8) << endl;
    //cout << pdf->xfxQ2(0, 1.141705e-05, 1.8) << endl;


    //PDF* pdf = mkPDF("H1_DPDF_2006A_NLO_pom", 0);
    //cout << pdf->xfxQ2(21, 1.149762e-03, pow(1.322876e+00,2)) << endl;
    return;
    */


    DPDFset dpdf("ZEUS_DPDF_2009SJ_NLO_pom");

    vector<double> zVec, qVec;
    getZEUSgrids(zVec, qVec);

    double z = 0.607857, q2 =  10.8499, xp = 0.1695188132295, tAbs = 0.5;
    
    //cout << dpdf.getPDF(0,0)->xfxQ2(21, 1.141705e-05, 1.8) << endl;
    //return;

    double fZeus[8];
    LoadGrid("standAlone/zeuspdf/grids/zeusD_SJ");
    //SelectGrid(1);
    Set_tmin(-tAbs);
    int imem = 1;
    for(auto q : qVec) {
        for(auto z : zVec) {

            ZeusDpdf3Pom(xp, z, q*q, fZeus); //--- Pomeron only

            for(int id = -5; id <= 6; ++id) {
                double zeusVal = abs(id) <= 5 ? fZeus[abs(id)] : 0;
                if(id == 0) continue;
                if(id == 6) id = 21;
                double newValPom = dpdf.getPDF(0,imem)->xfxQ2(id, z, q*q);
                //cout <<endl<< "Radek " << id <<" "<< z <<" "<< q << " "<< newValPom  << endl;
                double newVal = dpdf.zfzQ2xp(imem, id, z, q*q, xp, 0, tAbs);
                cout << newVal/zeusVal  <<" ";
            }
            cout << endl;
        }
    }
    return;

    LoadGrid("standAlone/zeuspdf/grids/zeusD_SJ");
    Set_tmin(-1);
    //double fZeus[7];
    ZeusDpdf3Pom(xp, z, q2, fZeus); //--- Pomeron only


    for(int id = -5; id <= 5; ++id) {
        //double z = 4.664286e-01, q2 = pow(1.350000e+00,2), xp = 0.003, tAbs = 1.0;
        //double z = 4.664286e-01, q2 = pow(3.010956e+00,2), xp = 0.03, tAbs = 1.0;
        //double z = 1e-05, q2 = 1.8, xp = 0.03, tAbs = 1.0;

        //double z = 9.999953e-04, q2 = pow(1.322876e+00,2), xp = 0.01, tAbs = 0.04;
        //cout << dpdf.zfzQ2xpt(0, id, z, q2, xp, tAbs) << endl;

        int imem = 1;
        double newValPom = dpdf.getPDF(0,imem)->xfxQ2(id, z, q2);
        double newVal = dpdf.zfzQ2xp(imem, id, z, q2, xp, 0, tAbs);



        cout << id <<" "<< newVal <<" "<< newValPom << " : " << fZeus[abs(id)] <<  endl;

        //qcd_2006_(&z, &q2, &ifit, xpq, f2, fl, c2, cl);

        //cout << imem<<" "<<newVal<< " "<< xpq[6+id] << " | " << xpq[6+id]/newVal << endl;
    }
    //cout << imem<<" "<< flux / dpdf.getDPDF(0,imem)->fluxInt(xp, 0, 0.3) << endl;
}








int main()
{
    //check2006();
    //checkZEUS();

    DPDFset dpdf("lhaTest_pom", "lhaTest_reg");
    double z = 4.037018e-02, q2 = pow(5.656854e+00,2), xp = 0.01, tAbs = 0.3;
    int imem = 0, id = 0;
    double newVal = dpdf.zfzQ2xp(imem, id, z, q2, xp, 0, tAbs);
    cout << newVal << endl;



    return 0;
    const LHAPDF::PDFSet set("GKG18_DPDF_FitA_NLO_pom");
    cout << "SetDesc: " << set.get_entry("SetDesc") << endl;
    cout << "Data version: " << set.get_entry("DataVersion") << endl;
    const LHAPDF::PDFInfo info("GKG18_DPDF_FitA_NLO_pom", 0);
    if (info.has_key("FluxParams")) cout << "FluxParams: " << info.get_entry("FluxParams") << endl;
    if (info.has_key("FluxType")) cout << "FluxType: " << info.get_entry("FluxType") << endl;

    //if (info.has_key("PdfType")) cout << "PdfType: " << info.get_entry("PdfType") << endl;
    //if (info.has_key("PdfType")) cout << "PdfType: " << info.get_entry("Format") << endl;
    //if (info.has_key("PdfType")) cout << "PomFlux: " << info.get_entry("PomFlux") << endl;


    return 0;
}



void getZEUSgrids(vector<double> &zVec, vector<double> &qVec)
{
zVec = {
1.0000000000000000818031e-05,1.0685060324987064489825e-05,1.1417051414861266136385e-05,1.2199188310127153379013e-05,1.3034906300958562521916e-05,1.3927876015629621624537e-05,1.4882019542594296038088e-05,1.5901527657025643056098e-05,1.6990878227476922040584e-05,1.8154855883510016085949e-05,1.9398573030675081733595e-05,2.0727492305143038986382e-05,2.2147450566615853686549e-05,2.3664684534895929400805e-05,2.5285858182715143720014e-05,2.7018092005137908228219e-05,2.8868994294094922658297e-05,3.0846694555411159578348e-05,3.2959879215101819960061e-05,3.5217829771765023065024e-05,3.7630463562643468608624e-05,4.0208377322407299161219e-05,4.2962893725976390051947e-05,4.5906111119806590687483e-05,4.9050956660069283947912e-05,5.2411243091116623189253e-05,5.6001729413614254103702e-05,5.9838185708807081991754e-05,6.3937462403638241782017e-05,6.8317564280946692779721e-05,7.2997729559809692440053e-05,7.7998514393365787336285e-05,8.3341883155248517667593e-05,8.9051304911185355755836e-05,9.5151856499483218935174e-05,1.0167033267314905904330e-04,1.0863536378741008687435e-04,1.1607754154953922815299e-04,1.2402955338330188422326e-04,1.3252632599817840120503e-04,1.4160517879394375856221e-04,1.5130598777438676897852e-04,1.6167136069010774987627e-04,1.7274682417965433610559e-04,1.8458102373095411873061e-04,1.9722593734131134966293e-04,2.1073710381440302250554e-04,2.2517386669699575437939e-04,2.4059963492679950947291e-04,2.5708216133627171057566e-04,2.7469384023561199768132e-04,2.9351202538198726101418e-04,3.1361936973156676750074e-04,3.3510418846662140069173e-04,3.5806084689216836989406e-04,3.8259017490587752261325e-04,4.0879990986166528594073e-04,4.3680516977211673737905e-04,4.6672895892812827625326e-04,4.9870270815654594610822e-04,5.3286685208871144205783e-04,5.6937144597538394928671e-04,6.0837682475720902472438e-04,6.5005430728548607190176e-04,6.9458694878630957564303e-04,7.4217034487304180383899e-04,7.9301349063849041216151e-04,8.4733969860008339410745e-04,9.0538757952982463865499e-04,9.6741209047701982436801e-04,1.0336856545868798248899e-03,1.1044993576334552910084e-03,1.1801642265222929330942e-03,1.2610125953782407894066e-03,1.3473995652185004681667e-03,1.4397045636221016649825e-03,1.5383330112461331661000e-03,1.6437181025083934422792e-03,1.7563227082575453251445e-03,1.8766414087876524558612e-03,2.0052026661264775279914e-03,2.1425711451386305131384e-03,2.2893501936382875880382e-03,2.4461844924045916122024e-03,2.6137628867390918195601e-03,2.7928214120019525384953e-03,2.9841465264156411332785e-03,3.1885785653351724107385e-03,3.4070154321567047359109e-03,3.6404165420756257574852e-03,3.8898070360158867875278e-03,4.1562822832388870639142e-03,4.4410126924082473157118e-03,4.7452488522415339419758e-03,5.0703270243276418044465e-03,5.4176750122352998473296e-03,5.7888184326909198143540e-03,6.1853874163699537960803e-03,6.6091237677328830771306e-03,7.0618886153531639296443e-03,7.5456705863387917368468e-03,8.0625945407510491574898e-03,8.6149309043836320293197e-03,9.2051056408934458369364e-03,9.8357109070825177177255e-03,1.0509516438131000226619e-02,1.1229481712787290487165e-02,1.1998768951947125227520e-02,1.2820757007713682457117e-02,1.3699056203942131665352e-02,1.4637524193450995521615e-02,1.5640282901548150512605e-02,1.6711736630290567606760e-02,1.7856591402995072859206e-02,1.9079875633964772652096e-02,2.0386962214216437783154e-02,2.1783592110213443465705e-02,2.3275899579254289567531e-02,2.4870439112267307690818e-02,2.6574214222349387681810e-02,2.8394708205493262437313e-02,3.0339917008610037263416e-02,3.2418384349209954098381e-02,3.4639239240992457380397e-02,3.7012236090166378277289e-02,3.9547797538609069656346e-02,4.2257060242041316611150e-02,4.5151923784282350926578e-02,4.8245102942427543768478e-02,5.1550183532504963157539e-02,5.5081682080896969544437e-02,5.8855109583614360901915e-02,6.2887039633464314469791e-02,6.7195181214341898057185e-02,7.1798456482368003261918e-02,7.6717083875506117407461e-02,8.1972666916687447757894e-02,8.7588289100487742855350e-02,9.3588615280111753236270e-02,1.0000000000000008881784e-01,1.0642857142857142793702e-01,1.1285714285714286420070e-01,1.1928571428571428658660e-01,1.2571428571428572285029e-01,1.3214285714285714523619e-01,1.3857142857142856762209e-01,1.4500000000000001776357e-01,1.5142857142857144014947e-01,1.5785714285714286253537e-01,1.6428571428571428492127e-01,1.7071428571428570730717e-01,1.7714285714285715744865e-01,1.8357142857142857983455e-01,1.9000000000000000222045e-01,1.9642857142857142460635e-01,2.0285714285714284699225e-01,2.0928571428571429713372e-01,2.1571428571428571951962e-01,2.2214285714285714190552e-01,2.2857142857142856429142e-01,2.3500000000000001443290e-01,2.4142857142857143681880e-01,2.4785714285714285920470e-01,2.5428571428571428159060e-01,2.6071428571428573173208e-01,2.6714285714285712636240e-01,2.7357142857142857650388e-01,2.8000000000000002664535e-01,2.8642857142857142127568e-01,2.9285714285714287141715e-01,2.9928571428571426604748e-01,3.0571428571428571618895e-01,3.1214285714285716633043e-01,3.1857142857142856096075e-01,3.2500000000000001110223e-01,3.3142857142857140573255e-01,3.3785714285714285587403e-01,3.4428571428571430601551e-01,3.5071428571428570064583e-01,3.5714285714285715078731e-01,3.6357142857142854541763e-01,3.6999999999999999555911e-01,3.7642857142857144570058e-01,3.8285714285714284033091e-01,3.8928571428571429047238e-01,3.9571428571428574061386e-01,4.0214285714285713524418e-01,4.0857142857142858538566e-01,4.1499999999999998001599e-01,4.2142857142857143015746e-01,4.2785714285714288029894e-01,4.3428571428571427492926e-01,4.4071428571428572507074e-01,4.4714285714285711970106e-01,4.5357142857142856984254e-01,4.6000000000000001998401e-01,4.6642857142857141461434e-01,4.7285714285714286475582e-01,4.7928571428571425938614e-01,4.8571428571428570952762e-01,4.9214285714285715966909e-01,4.9857142857142855429942e-01,5.0500000000000000444089e-01,5.1142857142857145458237e-01,5.1785714285714290472384e-01,5.2428571428571424384302e-01,5.3071428571428569398449e-01,5.3714285714285714412597e-01,5.4357142857142859426745e-01,5.5000000000000004440892e-01,5.5642857142857138352809e-01,5.6285714285714283366957e-01,5.6928571428571428381105e-01,5.7571428571428573395252e-01,5.8214285714285718409400e-01,5.8857142857142852321317e-01,5.9499999999999997335465e-01,6.0142857142857142349612e-01,6.0785714285714287363760e-01,6.1428571428571432377908e-01,6.2071428571428566289825e-01,6.2714285714285711303972e-01,6.3357142857142856318120e-01,6.4000000000000001332268e-01,6.4642857142857146346415e-01,6.5285714285714280258333e-01,6.5928571428571425272480e-01,6.6571428571428570286628e-01,6.7214285714285715300775e-01,6.7857142857142860314923e-01,6.8499999999999994226840e-01,6.9142857142857139240988e-01,6.9785714285714284255135e-01,7.0428571428571429269283e-01,7.1071428571428574283431e-01,7.1714285714285708195348e-01,7.2357142857142853209496e-01,7.2999999999999998223643e-01,7.3642857142857143237791e-01,7.4285714285714288251938e-01,7.4928571428571433266086e-01,7.5571428571428567178003e-01,7.6214285714285712192151e-01,7.6857142857142857206298e-01,7.7500000000000002220446e-01,7.8142857142857147234594e-01,7.8785714285714281146511e-01,7.9428571428571426160659e-01,8.0071428571428571174806e-01,8.0714285714285716188954e-01,8.1357142857142861203101e-01,8.1999999999999995115019e-01,8.2642857142857140129166e-01,8.3285714285714285143314e-01,8.3928571428571430157461e-01,8.4571428571428575171609e-01,8.5214285714285709083526e-01,8.5857142857142854097674e-01,8.6499999999999999111822e-01,8.7142857142857144125969e-01,8.7785714285714289140117e-01,8.8428571428571423052034e-01,8.9071428571428568066182e-01,8.9714285714285713080329e-01,9.0357142857142858094477e-01,9.1000000000000003108624e-01,9.1642857142857137020542e-01,9.2285714285714282034689e-01,9.2928571428571427048837e-01,9.3571428571428572062985e-01,9.4214285714285717077132e-01,9.4857142857142850989050e-01,9.5499999999999996003197e-01,9.6142857142857141017345e-01,9.6785714285714286031492e-01,9.7428571428571431045640e-01,9.8071428571428564957557e-01,9.8714285714285709971705e-01,9.9357142857142854985852e-01,1.0000000000000000000000e+00
};

qVec = {
1.3416407864998738386220e+00,1.3500000000000000888178e+00,1.4677220899290128741654e+00,1.6056519412215946029932e+00,1.7565438130548047812596e+00,1.9216158172073563026316e+00,2.1022005380666728413530e+00,2.2997557902443830357697e+00,2.5158763871436251591263e+00,2.7523070154828235267530e+00,3.0109563197086908203914e+00,3.2939123099983551590242e+00,3.6034592182354940881339e+00,3.9420959380345013123303e+00,4.2999999999999998223643e+00,4.7178306287928695184064e+00,5.1611909089971836905875e+00,5.6462161732861719798393e+00,6.1768219074989731964820e+00,6.7572915570382132699478e+00,7.3923111060374244729587e+00,8.0870069061214557848416e+00,8.8469870601418669764371e+00,9.6783866949676831126226e+00,1.0587917488807244481563e+01,1.1582921852882691382547e+01,1.2671432204851965863668e+01,1.3862235812477573304591e+01,1.5164945731008684148833e+01,1.6590078406935955257495e+01,1.8149138574594545048058e+01,1.9854712130964035310399e+01,2.1720567738419902070746e+01,2.3761767975649821238449e+01,2.5994790934027950157770e+01,2.8437663241063706465184e+01,3.1110105584789796040468e+01,3.4033691913870740108905e+01,3.7232023598614105708293e+01,4.0730919958842036976421e+01,4.4558626696706049585828e+01,4.8746043917070679185599e+01,5.3326975576216320007461e+01,5.8338402372597379041963e+01,6.3820780282633705837725e+01,6.9818367151538808457190e+01,7.6379579975669841473973e+01,8.3557385760648813288753e+01,9.1409729110554124531518e+01,1.0000000000000004263256e+02 };

}
